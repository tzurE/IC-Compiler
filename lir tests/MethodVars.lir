str1: "Good"
_DV_A: [_A_g]
# Class_A Offset Assignment: [1:xA,2:yA]
_DV_B: [_A_g,_B_f]
# Class_B Offset Assignment: [1:xA,2:yA,3:xB]


_A_g:
Move 4,R1
Move R1,v17xA
Move 5,R1
Move R1,v17yA
Return Rdummy
_ic_main:
Library __allocateObject(16),R1
MoveField _DV_B,R1.0
Move R1,v18b
Move v18b,R1
VirtualCall R1.1(),R2
Library __exit(0),Rdummy

_B_f:
Move 1,R1
Move R1,v20xA
Move 2,R1
Move R1,v20xB
Move 3,R1
Move R1,v20yA
Move this,R1
VirtualCall R1.0(),R2

#begin_if
Move this,R1
MoveField R1.3,R2
Move 2,R4
Compare R4,R2
JumpTrue _true_cmp_label1
_false_cmp_label1:
Move 0,R2
Jump _end_cmp_label1
_true_cmp_label1:
Move 1,R2
_end_cmp_label1:
Move this,R3
MoveField R3.1,R4
Move 4,R6
Compare R6,R4
JumpTrue _true_cmp_label3
_false_cmp_label3:
Move 0,R4
Jump _end_cmp_label3
_true_cmp_label3:
Move 1,R4
_end_cmp_label3:
Compare 0,R2
JumpTrue _end_cmp_label2
And R4,R2
_end_cmp_label2:
Move this,R3
MoveField R3.2,R4
Move 5,R6
Compare R6,R4
JumpTrue _true_cmp_label5
_false_cmp_label5:
Move 0,R4
Jump _end_cmp_label5
_true_cmp_label5:
Move 1,R4
_end_cmp_label5:
Compare 0,R2
JumpTrue _end_cmp_label4
And R4,R2
_end_cmp_label4:
Compare 0,R2
JumpTrue _false_cond_label1
Move str1,R1
Library __println(R1),Rdummy
Jump _end_cond_label1
_false_cond_label1:
Move this,R1
MoveField R1.3,R2
Library __printi(R2),Rdummy
Move this,R1
MoveField R1.1,R2
Library __printi(R2),Rdummy
Move this,R1
MoveField R1.2,R2
Library __printi(R2),Rdummy
_end_cond_label1:
#end_if
Return Rdummy

